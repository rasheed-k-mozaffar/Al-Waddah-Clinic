@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @{
                        if (isLoggedIn)
                        {
                            NavigationManager.NavigateTo("/unauthorized");
                        }
                        else
                        {
                            NavigationManager.NavigateTo("/user/login");
                        }
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />

        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                @{
                    NavigationManager.NavigateTo("/notfound");
                }
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>


@code {
    private bool isLoggedIn;

    private async Task<bool> CheckIfLoggedIn()
    {
        return await LocalStorage.ContainKeyAsync("access_token");
    }

    protected override async Task OnInitializedAsync()
    {
        isLoggedIn = await CheckIfLoggedIn();
        base.OnInitialized();
    }
}